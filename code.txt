// ==UserScript==
// @name         Materialize Enhanced
// @namespace    http://tampermonkey.net/
// @version      1.3
// @description  CSS enhancements for materialize default stylesheet.
// @author       miniman
// @match        https://materialize.is/*
// @match        https://materialize.is/index.php*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=materialize.is
// @grant        GM_addStyle
// @run-at       document-start
// ==/UserScript==
(function () {
  'use strict';

  const url = window.location.href;
  const path = window.location.pathname;

  // Inject Inter font globally
  const inter = document.createElement('link');
  inter.href = 'https://fonts.googleapis.com/css2?family=Inter&display=swap';
  inter.rel = 'stylesheet';
  document.head.appendChild(inter);

  // -------------------- FEATURE: ADD BONUS RATES CALCULATION --------------------
  if (path.includes('bonus.php')) {

    GM_addStyle(`

    #bonusTableContainer {
     padding:1rem;
     display:flex;
     justify-content:center;
    }

    #bonusTableContainer table {
      padding:1rem;
      width: 100%;
      max-width: 400px;
      border-collapse: collapse;
      margin-top: 1rem;
      font-family: sans-serif;
    }

    #bonusTableContainer th,
    #bonusTableContainer td {
      padding: 0.5rem;
      border: 1px solid #ccc;
      text-align: center;
    }

    #bonusTableContainer th {
      background-color: #f3f3f3;
    }

    #bonusTableContainer input {
      padding: 0.5rem;
      font-size: 1rem;
      width: 100px;
    }

    #bonusTableContainer label {
      font-weight: bold;
    }

    #bonusTableContainer .input-row {
      margin-bottom: 1rem;
    }
    `);


    function updateBonusPage() {
      const seedingTorrents = document.getElementById('nav_seeding_r').innerHTML;


      function calculateHourlyBonus(torrentCount) {
        const count = Math.min(torrentCount, 600);
        return Math.round((Math.sqrt((count * 0.4) + 1.0) - 1.0) * 10);
      }

      function calculateDailyBonus(torrentCount) {
        return Math.min(calculateHourlyBonus(torrentCount) * 24, 2400);
      }

      function calculateWeeklyBonus(torrentCount) {
        return calculateDailyBonus(torrentCount) * 7;
      }

      function calculateMonthlyBonus(torrentCount) {
        return calculateDailyBonus(torrentCount) * 30;
      }

      function updateBonusTable() {
        const input = document.getElementById('nav_seeding_r').innerHTML;
        const torrents = parseInt(input, 10) || 0;

        const hourly = calculateHourlyBonus(torrents);
        const daily = calculateDailyBonus(torrents);
        const weekly = calculateWeeklyBonus(torrents);
        const monthly = calculateMonthlyBonus(torrents);

        // Check if we already created the bonus table container
        let existingTable = document.getElementById("bonusTableContainer");
        if (!existingTable) {
          existingTable = document.createElement("div");
          existingTable.id = "bonusTableContainer";

          const bonusDiv = document.getElementById("bonusdiv");
          bonusDiv.insertAdjacentElement("afterend", existingTable);
        }

        // Inject the table HTML
        existingTable.innerHTML = `
      <table>
        <thead>
          <tr>
            <th>Interval</th>
            <th>Current Bonus Credit Rates</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Per Hour</td>
            <td>${hourly}</td>
          </tr>
          <tr>
            <td>Per Day</td>
            <td>${daily}</td>
          </tr>
          <tr>
            <td>Per Week</td>
            <td>${weekly}</td>
          </tr>
          <tr>
            <td>Per Month</td>
            <td>${monthly}</td>
          </tr>
        </tbody>
      </table>
    `;
      }

      // Initialize table on load
      updateBonusTable();
    }

    setTimeout(updateBonusPage, 200);

  }

  // -------------------- FEATURE: ADD CAROUSEL SLIDES FOR TORRENT DESCRIPTION IMAGES --------------------
  if (path.includes('torrents.php')) {
  function addSlidesForTorrentDescriptions() {

      window.addEventListener('DOMContentLoaded', () => {
        let currentIndex = 0;

        // Inject style block
        const style = document.createElement('style');
        style.textContent = `
.carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    font-size: 20px;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
    outline: none;
    line-height: 1; /* prevent icon misalignment */
}
.carousel-button:focus-visible {
    outline: 2px solid #007BFF;
    outline-offset: 2px;
}`;
        document.head.appendChild(style);


        function setupImageModal(img, index) {
          img.addEventListener('click', () => {
            let modalOverlay, fullImg;

            const showModal = () => {
              modalOverlay = document.createElement('div');
              modalOverlay.style.position = 'fixed';
              modalOverlay.style.top = '0';
              modalOverlay.style.left = '0';
              modalOverlay.style.width = '100vw';
              modalOverlay.style.height = '100vh';
              modalOverlay.style.backgroundColor = 'rgba(0,0,0,0.8)';
              modalOverlay.style.display = 'flex';
              modalOverlay.style.alignItems = 'center';
              modalOverlay.style.justifyContent = 'center';
              modalOverlay.style.zIndex = '9999';
              modalOverlay.style.opacity = '0';
              modalOverlay.style.transition = 'opacity 0.3s ease';

              fullImg = img.cloneNode(true);
              fullImg.removeAttribute('onclick');
              fullImg.style.maxWidth = '90%';
              fullImg.style.maxHeight = '90%';
              fullImg.style.borderRadius = '12px';
              fullImg.style.boxShadow = '0 0 20px rgba(0,0,0,0.5)';
              fullImg.style.cursor = 'zoom-out';
              fullImg.style.transform = 'scale(0.95)';
              fullImg.style.transition = 'transform 0.3s ease';

              modalOverlay.appendChild(fullImg);
              document.body.appendChild(modalOverlay);

              requestAnimationFrame(() => {
                modalOverlay.style.opacity = '1';
                fullImg.style.transform = 'scale(1)';
              });

              fullImg.addEventListener('click', closeModal);
              modalOverlay.addEventListener('click', closeModal);
              document.addEventListener('keydown', handleKeyDown);
            };

            const updateModalImage = () => {
              const node = nodes[currentIndex];
              const newImg = node.querySelector('img');
              if (newImg) {
                fullImg.src = newImg.src;
              }
            };

            const closeModal = () => {
              modalOverlay.style.opacity = '0';
              fullImg.style.transform = 'scale(0.95)';
              setTimeout(() => {
                modalOverlay.remove();
              }, 300);
              document.removeEventListener('keydown', handleKeyDown);
            };

            const handleKeyDown = (e) => {
              if (e.key === 'Escape') {
                closeModal();
              } else if (e.key === 'ArrowLeft') {
                currentIndex = (currentIndex - 1 + nodes.length) % nodes.length;
                updateModalImage();
              } else if (e.key === 'ArrowRight') {
                currentIndex = (currentIndex + 1) % nodes.length;
                updateModalImage();
              }
            };

            currentIndex = index;
            showModal();
          });
        }

        const descbox = document.getElementById('descbox');
        if (!descbox) return;

        const originalImages = Array.from(descbox.querySelectorAll('img.scale_image'));
        if (originalImages.length === 0) return;

        const nodes = originalImages.map(img => {
          const parent = img.parentElement;
          const isWrapped = parent.tagName.toLowerCase() === 'a';
          const wrapper = isWrapped ? parent.cloneNode(false) : document.createElement('div');
          const clonedImg = img.cloneNode(true);
          clonedImg.removeAttribute('onclick');
          clonedImg.style.borderRadius = '12px';
          clonedImg.setAttribute('tabindex', '0');
          wrapper.appendChild(clonedImg);
          return wrapper;
        });

        originalImages.forEach(img => img.remove());

        const carouselContainer = document.createElement('div');
        carouselContainer.style.position = 'relative';
        carouselContainer.style.maxWidth = '100%';
        carouselContainer.style.overflow = 'hidden';
        carouselContainer.style.marginBottom = '0.5em';

        const track = document.createElement('div');
        track.style.display = 'flex';
        track.style.transition = 'transform 0.3s ease';

        nodes.forEach((wrapper, index) => {
          const slide = document.createElement('div');
          slide.style.flex = '0 0 100%';
          slide.style.textAlign = 'center';

          const slideClone = wrapper.cloneNode(true);
          const img = slideClone.querySelector('img');
          if (img) {
            img.style.borderRadius = '12px';
            img.style.maxHeight = '400px';
            img.setAttribute('tabindex', '0');
            addKeyListeners(img);
            setupImageModal(img, index);
          }

          slide.appendChild(slideClone);
          track.appendChild(slide);
        });

        carouselContainer.appendChild(track);

        const prev = document.createElement('button');
        const next = document.createElement('button');

        prev.className = 'carousel-button';
        next.className = 'carousel-button';

        prev.style.left = '10px';
        next.style.right = '10px';

        prev.textContent = '<';
        next.textContent = '>';

        carouselContainer.appendChild(prev);
        carouselContainer.appendChild(next);

        const thumbsContainer = document.createElement('div');
        thumbsContainer.style.display = 'flex';
        thumbsContainer.style.overflowX = 'auto';
        thumbsContainer.style.gap = '0.5em';
        thumbsContainer.style.padding = '0.5em 0';
        thumbsContainer.style.justifyContent = 'center';
        thumbsContainer.style.flexWrap = 'nowrap';
        thumbsContainer.style.maxWidth = '100%';

        const thumbnails = nodes.map((wrapper, index) => {
          const img = wrapper.querySelector('img');
          const thumb = img.cloneNode(true);
          thumb.removeAttribute('onclick');
          thumb.style.width = '60px';
          thumb.style.height = 'auto';
          thumb.style.cursor = 'pointer';
          thumb.style.border = '2px solid transparent';
          thumb.style.borderRadius = '8px';
          thumb.style.transition = 'border-color 0.2s';

          const thumbWrapper = document.createElement('div');
          thumbWrapper.appendChild(thumb);

          thumb.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            currentIndex = index;
            updateSlide();
          });

          return thumbWrapper;
        });

        thumbnails.forEach(thumb => thumbsContainer.appendChild(thumb));

        descbox.appendChild(carouselContainer);
        descbox.appendChild(thumbsContainer);

        const updateSlide = () => {
          track.style.transform = `translateX(-${currentIndex * 100}%)`;
          thumbnails.forEach((wrapper, i) => {
            const img = wrapper.querySelector('img');
            img.style.borderColor = i === currentIndex ? '#007BFF' : 'transparent';
          });
        };

        prev.addEventListener('click', () => {
          currentIndex = (currentIndex - 1 + nodes.length) % nodes.length;
          updateSlide();
        });

        next.addEventListener('click', () => {
          currentIndex = (currentIndex + 1) % nodes.length;
          updateSlide();
        });

        function addKeyListeners(img) {
          img.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
              e.preventDefault();
              currentIndex = (currentIndex - 1 + nodes.length) % nodes.length;
              updateSlide();
            } else if (e.key === 'ArrowRight') {
              e.preventDefault();
              currentIndex = (currentIndex + 1) % nodes.length;
              updateSlide();
            }
          });
        }

        document.addEventListener('keydown', (e) => {
          const modalOpen = !!document.querySelector('div[style*="position: fixed"]');
          if (
            !modalOpen &&
            ['ArrowLeft', 'ArrowRight'].includes(e.key) &&
            !['INPUT', 'TEXTAREA'].includes(document.activeElement.tagName)
          ) {
            e.preventDefault();
            if (e.key === 'ArrowLeft') {
              currentIndex = (currentIndex - 1 + nodes.length) % nodes.length;
              updateSlide();
            } else if (e.key === 'ArrowRight') {
              currentIndex = (currentIndex + 1) % nodes.length;
              updateSlide();
            }
          }
        });

        updateSlide();
      });
    }
    addSlidesForTorrentDescriptions()
  }

  // -------------------- FEATURE: ADD HELPER TO COPY CODE BLOCKS --------------------
  if (path.includes('forums.php')) {

    GM_addStyle(`
        .copy-btn{
        background-color: #6639e6;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    margin-left:1rem !important;
    font-size: 1rem;
    cursor: pointer;
    transform: scale(1);
    transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .copy-btn:hover {
     background-color: #542cc2;
     transform: scale(1.1);
    }

        `);
    function addCopyHelperCode() {
      // Helper to decode HTML entities
      function decodeHTML(html) {
        const txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
      }

      // Convert <br> tags to newlines
      function convertBrToNewlines(html) {
        return html.replace(/<br\s*\/?>/gi, "\n");
      }


      // Find all spoiler toggle links
      document.querySelectorAll('a[onclick="BBCode.spoiler(this);"]').forEach(link => {
        const postContainer = link.closest('.post_content');
        if (!postContainer) return;

        // All spoilers and links within the same post
        const allSpoilers = [...postContainer.querySelectorAll('blockquote.hidden.spoiler')];
        const allLinks = [...postContainer.querySelectorAll('a[onclick="BBCode.spoiler(this);"]')];
        const linkIndex = allLinks.indexOf(link);

        const matchingSpoiler = allSpoilers[linkIndex];
        if (!matchingSpoiler) return;

        const codeBlock = matchingSpoiler.querySelector('code.bbcode');
        if (!codeBlock) return;

        // Avoid adding multiple buttons
        if (matchingSpoiler.nextElementSibling?.textContent === 'Copy Code') return;

        // Create the copy button
        const copyBtn = document.createElement("button");
        copyBtn.textContent = "Copy Code";
        copyBtn.classList.add("copy-btn"); // Add the btn class

        copyBtn.style.margin = "0.5em 0";
        copyBtn.addEventListener("click", function () {
          let html = codeBlock.innerHTML;
          html = convertBrToNewlines(html);
          const text = decodeHTML(html).trim();

          navigator.clipboard.writeText(text).then(() => {
            copyBtn.textContent = "Copied!";
            setTimeout(() => (copyBtn.textContent = "Copy Code"), 1500);
          });
        });

        matchingSpoiler.insertAdjacentElement("afterend", copyBtn);
      });
    }

    // Delay call to ensure DOM is fully rendered
    setTimeout(addCopyHelperCode, 200);
  }

  // -------------------- FEATURE: CHECK FOR COMPRESSED UPLOADS --------------------
  if (path.includes('upload.php')) {
    function checkForCompressedUploads() {
      // List of blocked compressed file extensions
      const compressedExtensions = [
        '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2',
        '.xz', '.lz', '.lzma', '.z', '.cab', '.arj', '.ace'
      ];

      // Create the check button once
      const checkBtn = document.createElement('button');
      checkBtn.textContent = 'Check for compressed content';
      checkBtn.type = 'button';

      Object.assign(checkBtn.style, {
        backgroundColor: '#c84d49',
        color: 'white',
        border: 'none',
        padding: '0.5rem 1rem',
        borderRadius: '0.375rem',
        fontSize: '1rem',
        cursor: 'pointer',
        transform: 'scale(1)',
        transition: 'background-color 0.3s ease, transform 0.2s ease',
        float: 'right',
        marginRight: '1rem',
        marginLeft: '10px'
      });

      checkBtn.addEventListener('mouseenter', () => {
        checkBtn.style.backgroundColor = '#a03c38';
        checkBtn.style.transform = 'scale(1.03)';
      });

      checkBtn.addEventListener('mouseleave', () => {
        checkBtn.style.backgroundColor = '#c84d49';
        checkBtn.style.transform = 'scale(1)';
      });

      const poll = setInterval(() => {
        const fileInput = document.getElementById('file');
        const dupeButton = document.querySelector('input[type="submit"][name="checkonly"]');
        const uploadButton = document.querySelector('input[type="submit"][name="submit"]');

        if (!fileInput || !dupeButton || !uploadButton) return;

        const dupeTd = dupeButton.closest('td');
        if (!dupeTd || dupeTd.dataset.zippedCheckAdded) return;

        dupeTd.dataset.zippedCheckAdded = 'true';

        // Insert check button next to dupeButton
        dupeTd.appendChild(checkBtn);

        // Shared file check function
        function checkForCompressed(file, callback) {
          const reader = new FileReader();
          reader.onload = function () {
            try {
              const text = reader.result;
              const metadata = bdecode(text);

              const info = metadata.info;
              let filenames = [];

              if (info.files) {
                for (const file of info.files) {
                  const path = Array.isArray(file.path) ? file.path.join('/') : file.path;
                  filenames.push(path);
                }
              } else if (info.name) {
                filenames.push(info.name);
              }

              const hasCompressed = filenames.some(name =>
                compressedExtensions.some(ext => name.toLowerCase().endsWith(ext))
              );

              callback(hasCompressed);
            } catch (err) {
              console.error('Failed to parse .torrent file:', err);
              callback(false);
            }
          };

          reader.readAsBinaryString(file);
        }

        // Button logic
        checkBtn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();

          const file = fileInput.files[0];
          if (!file) {
            alert('Please select a .torrent file first.');
            return;
          }

          checkForCompressed(file, (hasCompressed) => {
            if (hasCompressed) {
              alert('⚠️ This torrent contains compressed files (e.g., .zip, .rar).');
            } else {
              alert('✅ No compressed files detected.');
            }
          });
        });

        // Upload block logic
        uploadButton.addEventListener('click', (e) => {
          const file = fileInput.files[0];
          if (!file || !file.name.endsWith('.torrent')) return;

          e.preventDefault();
          e.stopImmediatePropagation();

          checkForCompressed(file, (hasCompressed) => {
            if (hasCompressed) {
              alert('❌ Upload blocked: Torrent contains compressed files like .zip or .rar.');
            } else {
              uploadButton.disabled = true;
              const clone = uploadButton.cloneNode(true);
              uploadButton.parentNode.replaceChild(clone, uploadButton);
              clone.click();
            }
          });
        }, true);

        // Simple bencode decoder
        function bdecode(input) {
          let index = 0;

          function parse() {
            const chr = input[index];

            if (chr === 'i') {
              index++;
              const end = input.indexOf('e', index);
              const number = parseInt(input.substring(index, end), 10);
              index = end + 1;
              return number;
            }

            if (chr === 'l') {
              index++;
              const list = [];
              while (input[index] !== 'e') list.push(parse());
              index++;
              return list;
            }

            if (chr === 'd') {
              index++;
              const dict = {};
              while (input[index] !== 'e') {
                const key = parse();
                dict[key] = parse();
              }
              index++;
              return dict;
            }

            if (/\d/.test(chr)) {
              const colon = input.indexOf(':', index);
              const length = parseInt(input.substring(index, colon), 10);
              const start = colon + 1;
              const end = start + length;
              const str = input.substring(start, end);
              index = end;
              return str;
            }

            throw new Error('Invalid bencode format at index ' + index);
          }

          return parse();
        }
      }, 500);
    }
    checkForCompressedUploads();
  }

  // -------------------- FEATURE: UPDATE COLLAGES IMAGES --------------------
  if (path.includes('collages.php')) {
    GM_addStyle(`
    ul.collage_images {
      opacity: 0 !important;
      transition: opacity 0.2s ease;
    }

    #collage-loading {
      font-family: sans-serif;
      font-size: 1rem;
      color: #555;
      text-align: center;
      margin: 2rem auto;
    }

    .masonry-grid {
      column-count: 4;
      column-gap: 10px;
      margin: 1rem 0;
      padding:1rem;
    }

    @media (max-width: 1000px) {
      .masonry-grid {
        column-count: 3;
      }
    }

    @media (max-width: 700px) {
      .masonry-grid {
        column-count: 2;
      }
    }

    .masonry-item {
      break-inside: avoid;
      margin-bottom: 10px;
      width: 100%;
      display: inline-block;
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 0.6s ease, transform 0.6s ease;
    }

    .masonry-item.show {
      opacity: 1;
      transform: translateY(0);
    }

    .masonry-item img.image-styled {
      width: 100%;
      height: auto;
      border-radius: 0.5rem;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
      display: block;
      opacity: 0;
      transition:
        opacity 0.2s ease,
        transform 0.2s ease-in-out,
        filter 0.2s ease-in-out;
    }

    .masonry-item img.image-styled.loaded {
      opacity: 1;
    }

    .masonry-item img.image-styled:hover {
      transform: scale(1.05);
      filter: brightness(1.1);
    }

    .masonry-item a {
      display: block;
    }

    form[action="collages.php"] input[name="url"] {
      max-width: 12rem;
      margin-bottom: 1rem;
    }

  `);


    function loadCollageFunctions() {

      function transformCollage() {
        const ul = document.querySelector('.collage_images');
        if (!ul || ul.classList.contains('masonry-processed')) return;

        ul.classList.add('masonry-processed');

        // Show loading text
        if (!document.getElementById('collage-loading')) {
          const loading = document.createElement('div');
          loading.id = 'collage-loading';
          loading.textContent = 'Loading images...';
          ul.insertAdjacentElement('beforebegin', loading);
        }




        const images = Array.from(ul.querySelectorAll('img')).map(img => ({
          src: img.src,
          alt: img.alt || '',
          title: img.title || '',
          href: img.closest('a')?.href || null
        }));

        const container = document.createElement('section');
        container.className = 'masonry-grid';

        const FALLBACK_IMAGE = 'https://via.placeholder.com/300x300?text=Not+Found';

        images.forEach(({ src, alt, title, href }) => {
          const item = document.createElement('div');
          item.className = 'masonry-item';

          const img = document.createElement('img');
          img.alt = alt;
          img.title = title;
          img.loading = 'lazy';
          img.className = 'image-styled';

          // Attach error + load handlers BEFORE src
          img.onerror = () => {
            if (img.src !== FALLBACK_IMAGE) {
              img.src = FALLBACK_IMAGE;
            }
          };

          img.onload = () => {
            const declaredSrc = img.getAttribute('src');
            const actualSrc = img.src;

            // Check if the src was replaced internally (e.g., from a link shortener to a CDN)
            const redirected = declaredSrc !== actualSrc;

            // Detect placeholder via known URL or size
            const isPlaceholder =
              actualSrc.includes('notfound') ||
              (img.naturalWidth === 120 && img.naturalHeight === 120);

            console.log({ declaredSrc, actualSrc, redirected, isPlaceholder });

            if (isPlaceholder) {
              img.src = 'https://ptpimg.me/77d64c.gif';
            } else {
              img.classList.add('loaded');
            }
          };
          img.src = src;

          if (href) {
            const link = document.createElement('a');
            link.href = href;
            link.appendChild(img);
            item.appendChild(link);
          } else {
            item.appendChild(img);
          }

          container.appendChild(item);
          requestAnimationFrame(() => item.classList.add('show'));
        });

        ul.replaceWith(container);
        const loadingEl = document.getElementById('collage-loading');
        if (loadingEl) loadingEl.remove();
      }

      // Delay initial load
      setTimeout(transformCollage, 300);

      // Wait until document.body exists before observing
      function waitForBodyAndObserve() {
        if (!document.body) {
          requestAnimationFrame(waitForBodyAndObserve);
          return;
        }

        const observer = new MutationObserver(() => {
          const ul = document.querySelector('.collage_images');
          if (ul && !ul.classList.contains('masonry-processed')) {
            transformCollage();
          }
        });

        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
      }

      waitForBodyAndObserve();
    }

    loadCollageFunctions();
  }

  // -------------------- CSS: BLOG PAGE STYLES --------------------
  if (path === "/" || path.includes('index.php')) {
    GM_addStyle(`
      .blog {
        background: linear-gradient(90deg, #c84d48, #c14b52, #b34765, #ac466f, #a24478, #9c4080, #94408a, #8d3e95, #94408a, #9c4080, #a24478, #ac466f, #b34765, #c14b52, #c84d48);
        background-size: 200% 100%;
        background-position: left center;
        transition: background-position 0.6s ease, transform 0.3s ease, box-shadow 0.3s ease;
        box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.15);
        border-radius: 0.5rem;
        display: block;
        overflow: hidden;
        padding-bottom: 4px;
      }
      .blog:hover {
        background-position: right center;
        transform: scale(1.02);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.25);
      }
      .blog .pad { padding: 0px 0px 4px 0px !important; }
      .blog > a {
        color: white;
        text-decoration: none;
        display: block;
      }
      .blog > a:hover { text-decoration: underline; }
    `);
  }

  // -------------------- CSS: FIX PERCENTILE CSS--------------------
  if (path.includes('user.php')) {
      function observePercentileFix() {
    const observer = new MutationObserver(() => {
      const targetDiv = Array.from(document.querySelectorAll('div')).find(
        el => el.textContent.trim() === 'Percentile Rankings (Hover for values)'
      );
      if (targetDiv) {
        observer.disconnect();
        targetDiv.textContent = '';
        targetDiv.style.height = 'auto';
        const p1 = document.createElement('p');
        p1.textContent = 'Percentile Rankings';
        p1.style.margin = '0';
        const p2 = document.createElement('p');
        p2.textContent = '(Hover for values)';
        p2.style.fontSize = '0.85rem';
        p2.style.margin = '-3px 0 0 0';
        targetDiv.append(p1, p2);
      }
    });
    observer.observe(document.documentElement, { childList: true, subtree: true });
  }
  observePercentileFix();
  }

  // -------------------- ICON REPLACEMENT (This should probably be cleaned up) --------------------
  const svgRSS = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="24" height="24" fill="#f26522">
  <path d="M64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l320 0c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32zM96 136c0-13.3 10.7-24 24-24c137 0 248 111 248 248c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-110.5-89.5-200-200-200c-13.3 0-24-10.7-24-24zm0 96c0-13.3 10.7-24 24-24c83.9 0 152 68.1 152 152c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-57.4-46.6-104-104-104c-13.3 0-24-10.7-24-24zm0 120a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z"/>
</svg>`;

  const svgUnread = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="18" height="18" fill="#8d3e95">
  <path d="M64 0C28.7 0 0 28.7 0 64L0 352c0 35.3 28.7 64 64 64l96 0 0 80c0 6.1 3.4 11.6 8.8 14.3s11.9 2.1 16.8-1.5L309.3 416 448 416c35.3 0 64-28.7 64-64l0-288c0-35.3-28.7-64-64-64L64 0z"/>
</svg>`.trim();

  const svgRead = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="18" height="18" fill="#8d3e95">
  <path d="M160 368c26.5 0 48 21.5 48 48l0 16 72.5-54.4c8.3-6.2 18.4-9.6 28.8-9.6L448 368c8.8 0 16-7.2 16-16l0-288c0-8.8-7.2-16-16-16L64 48c-8.8 0-16 7.2-16 16l0 288c0 8.8 7.2 16 16 16l96 0zm48 124l-.2 .2-5.1 3.8-17.1 12.8c-4.8 3.6-11.3 4.2-16.8 1.5s-8.8-8.2-8.8-14.3l0-21.3 0-6.4 0-.3 0-4 0-48-48 0-48 0c-35.3 0-64-28.7-64-64L0 64C0 28.7 28.7 0 64 0L448 0c35.3 0 64 28.7 64 64l0 288c0 35.3-28.7 64-64 64l-138.7 0L208 492z"/>
</svg>`.trim();

  const svgOkay = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="18" height="18" fill="#3b82f6">
  <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z"/>
</svg>`.trim();

  const svgDiskNone = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="18" height="18" fill="#d97706">
  <path d="M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-288-128 0c-17.7 0-32-14.3-32-32L224 0 64 0zM256 0l0 128 128 0L256 0zM216 232l0 102.1 31-31c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-72 72c-9.4 9.4-24.6 9.4-33.9 0l-72-72c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l31 31L168 232c0-13.3 10.7-24 24-24s24 10.7 24 24z"/>
</svg>`.trim();

  const svgDiskSeed = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="18" height="18" fill="#22c55e">
  <path d="M512 32c0 113.6-84.6 207.5-194.2 222c-7.1-53.4-30.6-101.6-65.3-139.3C290.8 46.3 364 0 448 0l32 0c17.7 0 32 14.3 32 32zM0 96C0 78.3 14.3 64 32 64l32 0c123.7 0 224 100.3 224 224l0 32 0 160c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-160C100.3 320 0 219.7 0 96z"/>
</svg>`.trim();

  const svgFreeDownload = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" width="20" height="20" fill="#c84d48">
  <path d="M0 241.1C0 161 65 96 145.1 96c38.5 0 75.4 15.3 102.6 42.5L320 210.7l72.2-72.2C419.5 111.3 456.4 96 494.9 96C575 96 640 161 640 241.1l0 29.7C640 351 575 416 494.9 416c-38.5 0-75.4-15.3-102.6-42.5L320 301.3l-72.2 72.2C220.5 400.7 183.6 416 145.1 416C65 416 0 351 0 270.9l0-29.7zM274.7 256l-72.2-72.2c-15.2-15.2-35.9-23.8-57.4-23.8C100.3 160 64 196.3 64 241.1l0 29.7c0 44.8 36.3 81.1 81.1 81.1c21.5 0 42.2-8.5 57.4-23.8L274.7 256zm90.5 0l72.2 72.2c15.2 15.2 35.9 23.8 57.4 23.8c44.8 0 81.1-36.3 81.1-81.1l0-29.7c0-44.8-36.3-81.1-81.1-81.1c-21.5 0-42.2 8.5-57.4 23.8L365.3 256z"/>
</svg>`.trim();

  const svgSnatched = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="18" height="18" fill="#fff">
  <path d="M192 32c17.7 0 32 14.3 32 32l0 135.5 111.5-66.9c15.2-9.1 34.8-4.2 43.9 11s4.2 34.8-11 43.9L254.2 256l114.3 68.6c15.2 9.1 20.1 28.7 11 43.9s-28.7 20.1-43.9 11L224 312.5 224 448c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-135.5L48.5 379.4c-15.2 9.1-34.8 4.2-43.9-11s-4.2-34.8 11-43.9L129.8 256 15.5 187.4c-15.2-9.1-20.1-28.7-11-43.9s28.7-20.1 43.9-11L160 199.5 160 64c0-17.7 14.3-32 32-32z"/>
</svg>`.trim();


  const svgSeeders = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="18" height="18" fill="#22c55e">
  <path d="M318 177.5c3.8-8.8 2-19-4.6-26l-136-144C172.9 2.7 166.6 0 160 0s-12.9 2.7-17.4 7.5l-136 144c-6.6 7-8.4 17.2-4.6 26S14.4 192 24 192l72 0 0 288c0 17.7 14.3 32 32 32l64 0c17.7 0 32-14.3 32-32l0-288 72 0c9.6 0 18.2-5.7 22-14.5z"/>
</svg>`.trim();

  const svgLeechers = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="18" height="18" fill="#ef4444">
  <path d="M2 334.5c-3.8 8.8-2 19 4.6 26l136 144c4.5 4.8 10.8 7.5 17.4 7.5s12.9-2.7 17.4-7.5l136-144c6.6-7 8.4-17.2 4.6-26s-12.5-14.5-22-14.5l-72 0 0-288c0-17.7-14.3-32-32-32L128 0C110.3 0 96 14.3 96 32l0 288-72 0c-9.6 0-18.2 5.7-22 14.5z"/>
</svg>`.trim();

  const svgStickyRead = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="18" height="18" fill="#C2C2C2">
  <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"/>
</svg>`.trim();


  const svgStickyUnread = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="18" height="18" fill="#facc15">
  <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"/>
</svg>`.trim();

  const svgLockedRead = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="18" height="18" fill="#C2C2C2">
  <path d="M144 144l0 48 160 0 0-48c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192l0-48C80 64.5 144.5 0 224 0s144 64.5 144 144l0 48 16 0c35.3 0 64 28.7 64 64l0 192c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 256c0-35.3 28.7-64 64-64l16 0z"/>
</svg>`.trim();

  const svgLockedUnread = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="18" height="18" fill="#facc15">
  <path d="M144 144l0 48 160 0 0-48c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192l0-48C80 64.5 144.5 0 224 0s144 64.5 144 144l0 48 16 0c35.3 0 64 28.7 64 64l0 192c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 256c0-35.3 28.7-64 64-64l16 0z"/>
</svg>`.trim();

  const svgLockedSticky = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="18" height="18" fill="#facc15">
  <path d="M144 144l0 48 160 0 0-48c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192l0-48C80 64.5 144.5 0 224 0s144 64.5 144 144l0 48 16 0c35.3 0 64 28.7 64 64l0 192c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 256c0-35.3 28.7-64 64-64l16 0z"/>
</svg>`.trim();

  const svgVideo = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="18" height="18" fill="#ffffff">
  <path d="M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-288-128 0c-17.7 0-32-14.3-32-32L224 0 64 0zM256 0l0 128 128 0L256 0zM64 288c0-17.7 14.3-32 32-32l96 0c17.7 0 32 14.3 32 32l0 96c0 17.7-14.3 32-32 32l-96 0c-17.7 0-32-14.3-32-32l0-96zM300.9 397.9L256 368l0-64 44.9-29.9c2-1.3 4.4-2.1 6.8-2.1c6.8 0 12.3 5.5 12.3 12.3l0 103.4c0 6.8-5.5 12.3-12.3 12.3c-2.4 0-4.8-.7-6.8-2.1z"/>
</svg>`.trim();

  const svgImageFile = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="18" height="18" fill="#fff">
  <path d="M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-288-128 0c-17.7 0-32-14.3-32-32L224 0 64 0zM256 0l0 128 128 0L256 0zM64 256a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm152 32c5.3 0 10.2 2.6 13.2 6.9l88 128c3.4 4.9 3.7 11.3 1 16.5s-8.2 8.6-14.2 8.6l-88 0-40 0-48 0-48 0c-5.8 0-11.1-3.1-13.9-8.1s-2.8-11.2 .2-16.1l48-80c2.9-4.8 8.1-7.8 13.7-7.8s10.8 2.9 13.7 7.8l12.8 21.4 48.3-70.2c3-4.3 7.9-6.9 13.2-6.9z"/>
</svg>`.trim();

  const svgOtherFile = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="18" height="18" fill="#fff">
  <path d="M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 288c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128z"/>
</svg>`.trim();

  const svgCompressedFile = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="18" height="18" fill="#fff">
  <path d="M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-288-128 0c-17.7 0-32-14.3-32-32L224 0 64 0zM256 0l0 128 128 0L256 0zM96 48c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16zm-6.3 71.8c3.7-14 16.4-23.8 30.9-23.8l14.8 0c14.5 0 27.2 9.7 30.9 23.8l23.5 88.2c1.4 5.4 2.1 10.9 2.1 16.4c0 35.2-28.8 63.7-64 63.7s-64-28.5-64-63.7c0-5.5 .7-11.1 2.1-16.4l23.5-88.2zM112 336c-8.8 0-16 7.2-16 16s7.2 16 16 16l32 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0z"/>
</svg>`.trim();


  function replaceIcons() {
    const replacements = [
      { selector: 'img[alt="RSS feed"]', svg: svgRSS },
      { selector: 'span.sicon.unread', svg: svgUnread },
      { selector: 'span.icon.icon_okay', svg: svgOkay },
      { selector: 'span.icon.icon_disk_none', svg: svgDiskNone },
      { selector: 'span.icon.icon_disk_seed', svg: svgDiskSeed },
    ];

    document.querySelectorAll('td.unread_locked_sticky:not([data-replaced])').forEach(td => {
      const span = document.createElement('span');
      span.innerHTML = svgLockedSticky;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      if (td.hasAttribute('title')) span.setAttribute('title', td.getAttribute('title'));
      td.innerHTML = '';
      td.appendChild(span);
      td.setAttribute('data-replaced', 'true');
    });

    document.querySelectorAll('td.read_locked:not([data-replaced])').forEach(td => {
      const span = document.createElement('span');
      span.innerHTML = svgLockedRead;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      if (td.hasAttribute('title')) span.setAttribute('title', td.getAttribute('title'));
      td.innerHTML = '';
      td.appendChild(span);
      td.setAttribute('data-replaced', 'true');
    });

    document.querySelectorAll('td.unread_locked:not([data-replaced])').forEach(td => {
      const span = document.createElement('span');
      span.innerHTML = svgLockedUnread;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      if (td.hasAttribute('title')) span.setAttribute('title', td.getAttribute('title'));
      td.innerHTML = '';
      td.appendChild(span);
      td.setAttribute('data-replaced', 'true');
    });



    document.querySelectorAll('td.read_sticky:not([data-replaced])').forEach(td => {
      const span = document.createElement('span');
      span.innerHTML = svgStickyRead;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      if (td.hasAttribute('title')) span.setAttribute('title', td.getAttribute('title'));
      td.innerHTML = '';
      td.appendChild(span);
      td.setAttribute('data-replaced', 'true');
    });

    document.querySelectorAll('td.unread_sticky:not([data-replaced])').forEach(td => {
      const span = document.createElement('span');
      span.innerHTML = svgStickyUnread;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      if (td.hasAttribute('title')) span.setAttribute('title', td.getAttribute('title'));
      td.innerHTML = '';
      td.appendChild(span);
      td.setAttribute('data-replaced', 'true');
    });

    replacements.forEach(({ selector, svg }) => {
      document.querySelectorAll(`${selector}:not([data-replaced])`).forEach(el => {
        const newSpan = document.createElement('span');
        newSpan.innerHTML = svg;
        newSpan.className = el.className;
        newSpan.style.display = 'inline-flex';
        newSpan.style.alignItems = 'center';
        newSpan.style.justifyContent = 'center';
        newSpan.style.width = '20px';
        newSpan.style.height = '20px';
        newSpan.style.background = 'none';
        if (svg === svgRSS) { newSpan.style.margin = '-2px 0 0 0' }
        newSpan.setAttribute('data-replaced', 'true');
        if (el.hasAttribute('title')) newSpan.setAttribute('title', el.getAttribute('title'));
        el.setAttribute('data-replaced', 'true');
        el.replaceWith(newSpan);
      });
    });

    document.querySelectorAll('td.unread:not([data-replaced])').forEach(td => {
      const span = document.createElement('span');
      span.innerHTML = svgUnread;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      span.setAttribute('data-replaced', 'true');
      if (td.hasAttribute('title')) span.setAttribute('title', td.getAttribute('title'));

      td.innerHTML = ''; // clear any content
      td.style.background = '';
      td.appendChild(span);
      td.setAttribute('data-replaced', 'true');

      // Replace <td class="read"> with SVG
      document.querySelectorAll('td.read:not([data-replaced])').forEach(td => {
        const span = document.createElement('span');
        span.innerHTML = svgRead;
        span.style.display = 'inline-flex';
        span.style.alignItems = 'center';
        span.style.justifyContent = 'center';
        span.style.width = '18px';
        span.style.height = '18px';
        span.setAttribute('data-replaced', 'true');
        if (td.hasAttribute('title')) span.setAttribute('title', td.getAttribute('title'));

        td.innerHTML = '';
        td.appendChild(span);
        td.setAttribute('data-replaced', 'true');
      });
    });

    // Replace freedownload.gif images
    document.querySelectorAll('img[src$="freedownload.gif"]:not([data-replaced])').forEach(img => {
      const span = document.createElement('span');
      span.innerHTML = svgFreeDownload;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '20px';
      span.style.height = '20px';
      span.style.float = 'none';
      span.setAttribute('data-replaced', 'true');
      if (img.hasAttribute('title')) span.setAttribute('title', img.getAttribute('title'));
      if (img.hasAttribute('alt')) span.setAttribute('aria-label', img.getAttribute('alt'));
      img.setAttribute('data-replaced', 'true');
      img.replaceWith(span);
    });

    // Replace snatched.png images
    document.querySelectorAll('img[src$="snatched.png"]:not([data-replaced])').forEach(img => {
      const span = document.createElement('span');
      span.innerHTML = svgSnatched;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      span.setAttribute('data-replaced', 'true');
      if (img.hasAttribute('title')) span.setAttribute('title', img.getAttribute('title'));
      if (img.hasAttribute('alt')) span.setAttribute('aria-label', img.getAttribute('alt'));
      img.setAttribute('data-replaced', 'true');
      img.replaceWith(span);
    });

    // Replace seeders.png images
    document.querySelectorAll('img[src$="seeders.png"]:not([data-replaced])').forEach(img => {
      const span = document.createElement('span');
      span.innerHTML = svgSeeders;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      span.setAttribute('data-replaced', 'true');
      if (img.hasAttribute('title')) span.setAttribute('title', img.getAttribute('title'));
      if (img.hasAttribute('alt')) span.setAttribute('aria-label', img.getAttribute('alt'));
      img.setAttribute('data-replaced', 'true');
      img.replaceWith(span);
    });

    // Replace leechers.png images
    document.querySelectorAll('img[src$="leechers.png"]:not([data-replaced])').forEach(img => {
      const span = document.createElement('span');
      span.innerHTML = svgLeechers;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      span.setAttribute('data-replaced', 'true');
      if (img.hasAttribute('title')) span.setAttribute('title', img.getAttribute('title'));
      if (img.hasAttribute('alt')) span.setAttribute('aria-label', img.getAttribute('alt'));
      img.setAttribute('data-replaced', 'true');
      img.replaceWith(span);
    });

    // replace video files
    document.querySelectorAll('img[src$="video.gif"]:not([data-replaced])').forEach(img => {
      const span = document.createElement('span');
      span.innerHTML = svgVideo;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      if (img.hasAttribute('title')) span.setAttribute('title', img.getAttribute('title'));
      if (img.hasAttribute('alt')) span.setAttribute('aria-label', img.getAttribute('alt'));
      img.setAttribute('data-replaced', 'true');
      span.setAttribute('data-replaced', 'true');
      img.replaceWith(span);
    });

    // Replace image.gif images
    document.querySelectorAll('img[src$="image.gif"]:not([data-replaced])').forEach(img => {
      const span = document.createElement('span');
      span.innerHTML = svgImageFile;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      span.setAttribute('data-replaced', 'true');
      if (img.hasAttribute('title')) span.setAttribute('title', img.getAttribute('title'));
      if (img.hasAttribute('alt')) span.setAttribute('aria-label', img.getAttribute('alt'));
      img.setAttribute('data-replaced', 'true');
      img.replaceWith(span);
    });

    // Replace other.gif images
    document.querySelectorAll('img[src$="other.gif"]:not([data-replaced])').forEach(img => {
      const span = document.createElement('span');
      span.innerHTML = svgOtherFile;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      span.setAttribute('data-replaced', 'true');
      if (img.hasAttribute('title')) span.setAttribute('title', img.getAttribute('title'));
      if (img.hasAttribute('alt')) span.setAttribute('aria-label', img.getAttribute('alt'));
      img.setAttribute('data-replaced', 'true');
      img.replaceWith(span);
    });

    // Replace compressed.gif images
    document.querySelectorAll('img[src$="compressed.gif"]:not([data-replaced])').forEach(img => {
      const span = document.createElement('span');
      span.innerHTML = svgCompressedFile;
      span.style.display = 'inline-flex';
      span.style.alignItems = 'center';
      span.style.justifyContent = 'center';
      span.style.width = '18px';
      span.style.height = '18px';
      span.setAttribute('data-replaced', 'true');
      if (img.hasAttribute('title')) span.setAttribute('title', img.getAttribute('title'));
      if (img.hasAttribute('alt')) span.setAttribute('aria-label', img.getAttribute('alt'));
      img.setAttribute('data-replaced', 'true');
      img.replaceWith(span);
    });



  }

  const observer = new MutationObserver(replaceIcons);

  observer.observe(document, {
    childList: true,
    subtree: true
  });

  document.addEventListener('DOMContentLoaded', replaceIcons);
})();

  // -------------------- GLOBAL STYLE --------------------
  GM_addStyle(`
    * { font-family: 'Inter', sans-serif !important; }
    .userinfo_stats > tbody {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    }

    .hidden {
    transition: max-height 0.3s ease;
  overflow: hidden;
    }
  `);

  // -------------------- FORUM STYLE --------------------
  GM_addStyle(`
  .unread, .read, .read_locked, .unread_locked_sticky {
        background: rgba(200, 200, 200, 0.5) no-repeat center center;
  }
`);
  // -------------------- PROFILE ADJUSTMENTS FIX --------------------
  GM_addStyle(`
     #menu ul#nav_menu svg {
       margin-left: 4px;
       fill: white;
     }
     #nav_userinfo:hover li {
        border-radius: 0 !important;
     }
       #nav_userinfo:active li {
        border-radius: 0 !important;
     }
     #nav_userinfo ul{
background-color:#8d3e95 !important;
     }

     @media (max-width: 1224px) {
     #userinfo_username li a {
       font-size: 0.5rem;
     }
     }

     #nav_userinfo:hover,
#nav_userinfo:hover > a {
  background-color: #6639e6 !important;
  color: white !important;
  text-decoration: none !important;
  transition: background-color 0.2s ease;
}

#menu ul#nav_menu > li#nav_userinfo > a {
  border-radius: 0.375rem;
  transition: all 0.2s ease;
}

#menu ul#nav_menu > li#nav_userinfo:hover > a {
  border-radius: 0 !important;
}`);

 // -------------------- ADD TORRENT TAGS STYLE--------------------
  GM_addStyle(`
    td > a:first-of-type {
    font-size: 1.2rem;
    font-weight: 600;
    color: #1f2937;
    text-decoration: none;
    display: inline-block;
  }

  td > a:first-of-type:hover {
    text-decoration: underline;
  }


  td .tags {
    display: block;
    margin-top: 0.25rem;
  }

  td .tags a {
    display: inline-flex;
    align-items: center;
    background-color: #f3e8ff;
    color: #7e22ce;
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    text-decoration: none;
    margin-right: 0.25rem;
    margin-bottom: 0.25rem;
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  td .tags a:hover {
    background-color: #e9d5ff;
    color: #581c87;
  }
  `);

  // -------------------- ADD TRANSITION STYLE--------------------
  GM_addStyle(`

    #menu ul#nav_menu > li > a {
   transition: background-color 0.3s ease, color 0.3s ease;
   }
   .searchcontainer .searchbutton {
     background-color: transparent;
     transform: scale(1);
     transition: background-color 0.2s ease, transform 0.2s ease;
   }

   .searchcontainer .searchbutton:hover {
     background-color: #e0e0e0;
     transform: scale(1.1);
   }

   .searchcontainer .searchbox {
     transition: box-shadow 0.3s ease, outline-color 0.3s ease;
   }

   .searchcontainer .searchbox:focus {
     box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.4);
     outline-color: #4f46e5;
   }

   #menu ul#nav_menu > li > a svg {
     transform: scale(1);
     fill: #6b7280;
     transition: transform 0.3s ease, fill 0.3s ease;
   }

   #menu ul#nav_menu > li:hover > a {
     background-color: #6639e6;
     color: #f0f0f0;
   }

   #menu ul#nav_menu > li:hover > a svg {
     transform: scale(1.1);
     fill: #6639e6;
   }

   #menu ul#nav_menu > li:hover > a span,
   #menu ul#nav_menu > li:hover > a strong {
     font-weight: bold;
   }

   input[type="submit"], input[type="button"], .button {
     background-color: #6639e6;
     color: white;
     border: none;
     padding: 0.5rem 1rem;
     border-radius: 0.375rem;
     font-size: 1rem;
     cursor: pointer;
     transform: scale(1);
     transition: background-color 0.3s ease, transform 0.2s ease;
   }

   input[value="Reset"] {
       background-color: #c84d48 ;

   }

   input[value="Reset"]:hover {
       background-color: #cd015d !important ;

   }

input[value="Make Default"] {
       background-color: #f3f4f6 ;

   }

   input[value="Make Default"]:hover {
       background-color: #a8a8a8 !important ;

   }

   .search_buttons > span {
   display: flex;
   gap: 0.2rem;

    max-height: 2.3rem;



   }
   .search_buttons > span > input {
   padding:0px;
   }



   input[type="submit"]:hover,
   input[type="button"]:hover {
     background-color: #542cc2;
     transform: scale(1.03);
   }

   a {
     color: #6639e6;
     text-decoration: none;
     transition: color 0.25s ease, text-decoration 0.25s ease;
   }

   a:hover {
     color: #542cc2;
     text-decoration: underline;
   }
`);


 // -------------------- ROUND BORDERS ADJUSTMENT --------------------

  GM_addStyle(`

#nav_menu > li {
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  border-radius: 0.5rem;
}

#nav_menu > li {
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  border-radius: 0.5rem;
}

#nav_menu > li#nav_userinfo:hover {
  border-radius: 0.5rem 0.5rem 0 0 !important;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}

     .head {
    height: auto;
    text-wrap-mode: wrap;
    min-height: 2rem;
    background: linear-gradient(to right,
      #c84d48,
      #c14b52,
      #b34765,
      #ac466f,
      #a24478,
      #9c4080,
      #94408a,
      #8d3e95
    ) !important;
    color: white;
    padding: 0.75rem 1rem;
    border-top-left-radius: 0.5rem;
    border-top-right-radius: 0.5rem;
             font-size: 1.3rem !important;

  }


     .pad {
       font-size: 1rem;
     }


       .head + div {
    border-bottom-left-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
    overflow: hidden;
    }

    .head + div.box {
    border-bottom-left-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    margin-bottom: 1.5rem;
    }
    .forum_index { box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3); }
    #torrent_table  {
    border-bottom-left-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    margin-bottom: 1.5rem;
    }


    `);
// -------------------- TORRENTS CSS UPDATES--------------------
GM_addStyle(`

img.top10_thumbnail {
    object-fit: scale-down;
    background: black;
    height: 175px;
    width: 175px;
    border-radius: 0.5rem;
    border: 1px solid black;
}

`);

// -------------------- UPDATE FORUM IMAGES--------------------
GM_addStyle(`
 .avatar > img{
  width:inherit;
  max-height: none !important;
  padding-right:1rem;
 }
`);

// -------------------- UPDATE FORM INPUTS--------------------

GM_addStyle(`

#searchbars .searchbutton {
width: 30px;
height:25px;

}
   input.searchbox,
input.searchbutton {
  margin: 0;
  padding: 0;
  background: none;
  box-shadow: none;
  color: inherit;
  outline: none;
  box-sizing: border-box;
}
#searchbars ul{
width:75%;
white-space: nowrap;
}

#searchbars input.searchbox{
width:100% !important;
height: 25px;

}

.searchcontainer > input:first-of-type, #searchbox_forums,#searchbox_users {
box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}
.searchcontainer {
background-color:unset !important;
}

.searchcontainer .searchbox {
  display: block;
  width: 100%;
  border-radius: 9999px;
   background-color: #C2C2C2;
  padding: 0.375rem 1rem;
  font-size: 1rem;
  line-height: 1.5rem;
  color: #111827;
  outline-width: 1px;
  outline-offset: -1px;
  outline: 1px solid #d1d5db;

  box-sizing: border-box;
}

.searchcontainer .searchbox::placeholder {
  color: #9ca3af;
}

.searchcontainer > input {
  border: 1.5px solid #a0a4ac !important;

}
.searchcontainer .searchbox:focus {
  outline-width: 2px;
  outline-offset: -2px;
  outline-color: #4f46e5;
}

.searchcontainer .searchbutton {
  background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' fill='%23a0a4ac'><path d='M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z'/></svg>") no-repeat center center !important;
  background-size: 15px 15px !important;
  border: none !important;
  width: 36px;
  height: 36px;
  padding: 0;
  cursor: pointer;
}

.searchcontainer {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 0.25rem;
}



@media (min-width: 640px) {
  .searchcontainer .searchbox {
    font-size: 0.875rem;
    line-height: 1.5rem;
  }
}



  input[type="text"],
  input[type="number"],
  textarea[name="taglist"] {
    width: 100%;
    max-width: 25rem;
    height:2rem;
    border-radius: 0.375rem;
    background-color: #f3f4f6;
    padding: 0.375rem 1rem;
    font-size: 1rem;
    line-height: 1.5rem;
    color: #111827;
    box-sizing: border-box;
    border: none;
    outline: 1px solid #d1d5db;
    outline-offset: -1px;
    transition: outline 0.2s ease, outline-offset 0.2s ease;
  }
input[name="sizerange"] {
width: 4rem !important;
display: inline !important;
margin-left: 12px;
}
    input[type="number"]:focus,
    input[type="text"]:focus,
  textarea[name="taglist"]:focus {
    outline: 2px solid #4f46e5;
    outline-offset: -2px;
  }


  input[type="text"]::placeholder,
  input[type="number"]::placeholder,
  textarea[name="taglist"]::placeholder {
    color: #9ca3af;
  }
input[type="checkbox"] {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 1.2rem;
  height: 1.2rem;
  background-color: #ffffff;
  border: 1px solid #d1d5db;
  border-radius: 0.2rem;
  position: relative;
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  box-sizing: border-box;
  outline-offset: -1px;
}

input[type="checkbox"]:checked {
  background-color: #4f46e5;
  border-color: #4f46e5;
}

input[type="checkbox"]:checked::after {
  content: "";
  position: absolute;
  top: 45%;
  left: 50%;
  width: 5px;
  height: 9px;
  border: solid white;
  border-width: 0 2px 2px 0;
  transform: translate(-50%, -50%) rotate(45deg);
  pointer-events: none;
}

input[type="checkbox"]:focus-visible {
  outline: 2px solid #4f46e5;
  outline-offset: 2px;
}

input[type="checkbox"]:disabled {
  background-color: #f3f4f6;
  border-color: #d1d5db;
  cursor: not-allowed;
}

input[type="checkbox"]:disabled:checked::after {
  border-color: #9ca3af;
}

select {
  appearance: none;
  background-color: #f3f4f6;
  color: #111827;
  font-size: 0.875rem;
  font-weight: 600;
  padding: 0.5rem 2.5rem 0.5rem 0.75rem;
  border-radius: 0.375rem;
  border: 1px solid #d1d5db;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 20 20' fill='gray' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' d='M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.72-3.72a.75.75 0 111.06 1.06l-4.25 4.25a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.06z' clip-rule='evenodd'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 1rem 1rem;
  width: auto;
}

select:hover {
  background-color: #f9fafb;
}

select:focus {
  outline: 2px solid #6366f1;
  outline-offset: 2px;
}

label {
  font-size: 0.875rem;        /* text-sm */
  line-height: 1.5rem;        /* /6 */
  font-weight: 500;           /* medium */
  color: #111827;             /* text-gray-900 */
  margin-bottom: 0.5rem;
}

textarea {
  display: block;
  width: 100%;
  border-radius: 0.375rem;    /* rounded-md */
  background-color: #ffffff;  /* bg-white */
  padding: 0.375rem 0.75rem;  /* py-1.5 px-3 */
  font-size: 1rem;            /* text-base */
  line-height: 1.5rem;
  color: #111827;             /* text-gray-900 */
  outline: 1px solid #d1d5db; /* outline-gray-300 */
  outline-offset: -1px;
  box-sizing: border-box;
  resize: vertical;

  transition:
    outline-color 0.3s ease,
    outline-offset 0.3s ease,
    box-shadow 0.3s ease,
    background-color 0.3s ease;
}

textarea::placeholder {
  color: #9ca3af;
}

textarea:focus {
  outline: 2px solid #4f46e5;
  outline-offset: -2px;
  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
}

.bb_button {
  background-color: #f3f4f6;
  border: 1px solid #d1d5db;
  color: #4b5563;
  font-size: 0.875rem;
  border-radius: 0.375rem;
  padding: 0.375rem 0.75rem;
  margin: 2px;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
}
.bb_button:hover {
  background-color: #e5e7eb;
  color: #111827;
}
.bb_icon {
  width: 24px;
  height: 24px;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 0.375rem;
  transition: background-color 0.2s ease;
}
.bb_icon:hover {
  background-color: #e5e7eb;
}
.bb_buttons_left {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  padding: 0.5rem;
  border-radius: 0.375rem 0 0 0.375rem;
  align-items: baseline;
}
.bb_buttons_right {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem;
  border-radius: 0 0.375rem 0.375rem 0;
  align-items: baseline;
}
.bb_holder {margin:0 0 10px 0 !important;}
#quickpost {width:100%;}
#fontfontquickpost { padding-left: 0.5rem; }
#fontsizequickpost { padding: 0 0.5rem; }

`);
